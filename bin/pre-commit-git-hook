#!/usr/bin/env bash
# GIT Pre-Commit Hook
#
# Inspired from the work of:
#  Ronny Roethof
#  Mattias Geniar <m@ttias.be>
#  Rob Nelson <rnelson0@gmail.com>

# Bash strict mode
set -euo pipefail
IFS=$'\n\t'

# DEBUG
[ -z "${DEBUG:-}" ] || set -x

# Add /usr/local/bin to PATH
PATH="/usr/local/bin:${PATH}"

# Load RVM
set +eu
# shellcheck disable=SC1091
[[ -s /etc/profile.d/rvm.sh ]] && . /etc/profile.d/rvm.sh
# shellcheck disable=SC1090
[[ -s "${HOME}/.rvm/scripts/rvm" ]] && . "${HOME}/.rvm/scripts/rvm"
set -eu

# Output
e_ok()    { printf "  ✔  %s\\n" "$@" ;}
e_info()  { printf "  ➜  %s\\n" "$@" ;}
e_error() { printf "  ✖  %s\\n" "$@" ;}
e_warn()  { printf "    %s\\n" "$@" ;}
e_abort() { e_error "$1"; return "${2:-1}" ;}

# Check if command exists
is_cmd() { command -v "$@" >/dev/null 2>&1 ;}

# Check YAML
checkyaml() {
  ruby -e "require 'yaml'; YAML.load_file('$1')"
}

# Throw error
throw_error() {
  e_error "$@"
  syntax_is_bad=1
}

# Make sure the necessary tools are installed. If they aren't, just die and
# stop the commit. Force the use of these tools before a commit is allowed.
# No commit should ever happen without a puppet-lint check.
check_tools(){
  is_cmd git         || e_abort "The git binary wasn't found."
  is_cmd puppet      || e_abort "The puppet binary wasn't found."
  is_cmd puppet-lint || e_abort "The puppet-lint binary wasn't found."
  is_cmd erb         || e_abort "The erb binary wasn't found."
  is_cmd ruby        || e_abort "The ruby binary wasn't found."
  is_cmd r10k        || e_abort "The r10k binary wasn't found."
  is_cmd shellcheck  || e_abort "The shellcheck binary wasn't found."
}

# Checks

check_puppet_syntax(){
  e_info "Checking puppet syntax, for science!"
  for file in $(git diff --name-only --cached | grep -E '\.pp'); do
    # Only check new/modified files that end in *.pp extension
    if [[ -f $file ]]; then
      if puppet-lint \
        --no-140chars-check \
        --with-filename "$file"; then
        e_ok "$file looks valid"
      else
        throw_error "puppet syntax failed at: $file"
      fi
    fi
  done
}

check_puppet_manifests(){
  e_info "Checking if puppet manifests are valid!"
  for file in $(git diff --name-only --cached | grep -E '\.pp'); do
    if [[ -f $file ]]; then
      if puppet parser validate "$file"; then
        e_ok "$file looks valid"
      else
        throw_error "puppet parser failed at: $file"
      fi
    fi
  done
}

check_ruby_template(){
  e_info "Checking if ruby template syntax is valid!"
  for file in $(git diff --name-only --cached | grep -E '\.erb'); do
    if [[ -f $file ]]; then
      if erb -P -x -T '-' "$file" | ruby -c; then
        e_ok "$file looks valid"
      else
        throw_error "ruby template parser failed at: $file"
      fi
    fi
  done
}

check_puppet_template(){
  e_info "Checking if puppet template syntax is valid!"
  for file in $(git diff --name-only --cached | grep -E '\.epp'); do
    if [[ -f $file ]]; then
      if puppet epp validate "$file"; then
        e_ok "$file looks valid"
      else
        throw_error "puppet template parser failed at: $file"
      fi
    fi
  done
}

check_yaml(){
  e_info "Checking if YAML syntax is valid!"
  for file in $(git diff --name-only --cached | grep -E '\.yaml'); do
    if [[ -f $file ]]; then
      if checkyaml "$file"; then
        e_ok "$file looks valid"
      else
        throw_error "YAML syntax validation failed at: $file"
      fi
    fi
  done
}

check_puppetfile(){
  e_info "Checking if R10K Puppetfile syntax is valid!"
  for file in $(git diff --name-only --cached | grep -E 'Puppetfile'); do
    if [[ -f $file ]]; then
      if PUPPETFILE="$file" r10k puppetfile check; then
        e_ok "$file looks valid"
      else
        throw_error "R10K Puppetfile validation failed at: $file"
      fi
    fi
  done
}

check_bash(){
  e_info "Checking if bash syntax is valid!"
  for file in $(git diff --name-only --cached | grep -E '\.sh'); do
    if [[ -f $file ]]; then
      if shellcheck "$file"; then
        e_ok "$file looks valid"
      else
        throw_error "Bash syntax validation failed at: $file"
      fi
    fi
  done
}

# Report
main(){
  check_tools

  check_puppet_syntax
  check_puppet_manifests
  check_ruby_template
  check_puppet_template
  check_yaml
  check_puppetfile
  check_bash

  if [[ ${syntax_is_bad:-0} -eq 1 ]]; then
    e_abort "Please fix the errors above before committing your code"
  else
    e_ok "Everything looks good."
  fi
}

# Main
main "$@"
